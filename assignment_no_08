Q1. What are the two latest user-defined exception constraints in Python 3.X?

 In Python 3.x, the two latest user-defined exception constraints are:

__traceback__: This attribute is used to specify a traceback object that provides more detailed information about the context in which the exception occurred.
__cause__: This attribute is used to specify another exception that caused the current exception to be raised. It allows you to provide more information about the chain of events that led to the exception.

Q2. How are class-based exceptions that have been raised matched to handlers?

A2. When a class-based exception is raised in Python, the interpreter searches for an appropriate exception handler to handle the exception. It does this by searching the call stack for a try/except block that matches the type of the raised exception. If it finds a match, the except block associated with the try block is executed. If it doesn't find a match, the exception is propagated up the call stack until it reaches the top-level of the program, at which point the interpreter will print a traceback and terminate the program.

Q3. Describe two methods for attaching context information to exception artefacts.

Using the with_traceback() method: This method allows you to attach a traceback object to an exception, which provides more detailed information about the context in which the exception occurred.
Adding custom attributes to the exception object: You can add custom attributes to an exception object to provide additional context information that may be useful for debugging or error reporting.

Q4. Describe two methods for specifying the text of an exception objects error message.

Passing a message string to the exception constructor: You can pass a string message to the exception constructor when raising an exception. This message will be included in the traceback and can provide useful information about the cause of the exception.
Defining a custom __str__() method for the exception class: You can define a custom __str__() method for the exception class that returns a formatted string representing the error message. This can be useful if you want to provide more detailed information about the exception than a simple string message can convey.

Q5. Why do you no longer use string-based exceptions?

String-based exceptions are no longer used in Python because they are less flexible and less informative than class-based exceptions. With class-based exceptions, you can define custom exception classes that provide more detailed information about the cause of the exception, including stack traces and context information. Additionally, class-based exceptions can be caught and handled more selectively, allowing for more fine-grained control over exception handling.